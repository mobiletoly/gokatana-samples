// Code generated by go-swagger; DO NOT EDIT.

package swagger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaginationInfo pagination info
//
// swagger:model PaginationInfo
type PaginationInfo struct {

	// Number of items per page
	// Required: true
	Limit int64 `json:"limit"`

	// Current page number
	// Required: true
	Page int64 `json:"page"`

	// Total number of items
	// Required: true
	Total int64 `json:"total"`

	// Total number of pages
	// Required: true
	TotalPages int64 `json:"totalPages"`
}

// Validate validates this pagination info
func (m *PaginationInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginationInfo) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", int64(m.Limit)); err != nil {
		return err
	}

	return nil
}

func (m *PaginationInfo) validatePage(formats strfmt.Registry) error {

	if err := validate.Required("page", "body", int64(m.Page)); err != nil {
		return err
	}

	return nil
}

func (m *PaginationInfo) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", int64(m.Total)); err != nil {
		return err
	}

	return nil
}

func (m *PaginationInfo) validateTotalPages(formats strfmt.Registry) error {

	if err := validate.Required("totalPages", "body", int64(m.TotalPages)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this pagination info based on context it is used
func (m *PaginationInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaginationInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaginationInfo) UnmarshalBinary(b []byte) error {
	var res PaginationInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
