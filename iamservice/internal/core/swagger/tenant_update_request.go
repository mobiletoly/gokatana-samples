// Code generated by go-swagger; DO NOT EDIT.

package swagger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantUpdateRequest Request payload for updating a tenant
//
// swagger:model TenantUpdateRequest
type TenantUpdateRequest struct {

	// Optional description of the tenant
	// Example: Updated description for Acme Corporation
	// Required: true
	Description string `json:"description"`

	// Human-readable tenant name
	// Example: Acme Corporation Updated
	// Required: true
	Name string `json:"name"`
}

// Validate validates this tenant update request
func (m *TenantUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantUpdateRequest) validateDescription(formats strfmt.Registry) error {

	if err := validate.RequiredString("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *TenantUpdateRequest) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tenant update request based on context it is used
func (m *TenantUpdateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TenantUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantUpdateRequest) UnmarshalBinary(b []byte) error {
	var res TenantUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
