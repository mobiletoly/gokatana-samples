// Code generated by go-swagger; DO NOT EDIT.

package swagger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthUserResponse Authentication user data from auth_user table (excluding sensitive fields)
//
// swagger:model AuthUserResponse
type AuthUserResponse struct {

	// Account creation timestamp
	// Example: 2023-12-01T10:00:00Z
	// Required: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt"`

	// User email address (unique in auth_user table)
	// Example: user@example.com
	// Required: true
	// Format: email
	Email strfmt.Email `json:"email"`

	// User first name
	// Example: John
	// Required: true
	FirstName string `json:"firstName"`

	// User unique identifier (primary key from auth_user table)
	// Example: uuid-123-456-789
	// Required: true
	ID string `json:"id"`

	// User last name
	// Example: Doe
	// Required: true
	LastName string `json:"lastName"`

	// Tenant identifier for multi-tenant support
	// Example: acme-corp
	// Required: true
	TenantID string `json:"tenantId"`

	// Last profile update timestamp
	// Example: 2023-12-01T10:00:00Z
	// Required: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt"`
}

// Validate validates this auth user response
func (m *AuthUserResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthUserResponse) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuthUserResponse) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", strfmt.Email(m.Email)); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuthUserResponse) validateFirstName(formats strfmt.Registry) error {

	if err := validate.RequiredString("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *AuthUserResponse) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AuthUserResponse) validateLastName(formats strfmt.Registry) error {

	if err := validate.RequiredString("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *AuthUserResponse) validateTenantID(formats strfmt.Registry) error {

	if err := validate.RequiredString("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *AuthUserResponse) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this auth user response based on context it is used
func (m *AuthUserResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuthUserResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthUserResponse) UnmarshalBinary(b []byte) error {
	var res AuthUserResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
