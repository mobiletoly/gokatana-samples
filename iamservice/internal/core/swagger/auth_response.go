// Code generated by go-swagger; DO NOT EDIT.

package swagger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthResponse auth response
//
// swagger:model AuthResponse
type AuthResponse struct {

	// JWT access token
	// Example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
	// Required: true
	AccessToken string `json:"accessToken"`

	// Token expiration time in seconds
	// Example: 3600
	// Required: true
	ExpiresIn int64 `json:"expiresIn"`

	// JWT refresh token
	// Example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
	// Required: true
	RefreshToken string `json:"refreshToken"`

	// Token type
	// Example: Bearer
	// Required: true
	TokenType string `json:"tokenType"`

	// User unique identifier
	// Example: uuid-123-456-789
	// Required: true
	UserID string `json:"userId"`
}

// Validate validates this auth response
func (m *AuthResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthResponse) validateAccessToken(formats strfmt.Registry) error {

	if err := validate.RequiredString("accessToken", "body", m.AccessToken); err != nil {
		return err
	}

	return nil
}

func (m *AuthResponse) validateExpiresIn(formats strfmt.Registry) error {

	if err := validate.Required("expiresIn", "body", int64(m.ExpiresIn)); err != nil {
		return err
	}

	return nil
}

func (m *AuthResponse) validateRefreshToken(formats strfmt.Registry) error {

	if err := validate.RequiredString("refreshToken", "body", m.RefreshToken); err != nil {
		return err
	}

	return nil
}

func (m *AuthResponse) validateTokenType(formats strfmt.Registry) error {

	if err := validate.RequiredString("tokenType", "body", m.TokenType); err != nil {
		return err
	}

	return nil
}

func (m *AuthResponse) validateUserID(formats strfmt.Registry) error {

	if err := validate.RequiredString("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this auth response based on context it is used
func (m *AuthResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuthResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthResponse) UnmarshalBinary(b []byte) error {
	var res AuthResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
