// Code generated by go-swagger; DO NOT EDIT.

package swagger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SignupRequest Request payload for creating new auth_user record
//
// swagger:model SignupRequest
type SignupRequest struct {

	// User email address (must be unique within tenant)
	// Example: user@example.com
	// Required: true
	// Format: email
	Email strfmt.Email `json:"email"`

	// User first name
	// Example: John
	// Required: true
	FirstName string `json:"firstName"`

	// User last name
	// Example: Doe
	// Required: true
	LastName string `json:"lastName"`

	// User password (minimum 8 characters, will be hashed)
	// Example: SecurePassword123!
	// Required: true
	// Min Length: 8
	Password string `json:"password"`

	// Platform source for customized email confirmation experience
	// Example: web
	// Required: true
	// Enum: ["web","android","ios"]
	Source string `json:"source"`

	// Tenant identifier for multi-tenant support
	// Example: acme-corp
	// Required: true
	TenantID string `json:"tenantId"`
}

// Validate validates this signup request
func (m *SignupRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignupRequest) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", strfmt.Email(m.Email)); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SignupRequest) validateFirstName(formats strfmt.Registry) error {

	if err := validate.RequiredString("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *SignupRequest) validateLastName(formats strfmt.Registry) error {

	if err := validate.RequiredString("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *SignupRequest) validatePassword(formats strfmt.Registry) error {

	if err := validate.RequiredString("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", m.Password, 8); err != nil {
		return err
	}

	return nil
}

var signupRequestTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["web","android","ios"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		signupRequestTypeSourcePropEnum = append(signupRequestTypeSourcePropEnum, v)
	}
}

const (

	// SignupRequestSourceWeb captures enum value "web"
	SignupRequestSourceWeb string = "web"

	// SignupRequestSourceAndroid captures enum value "android"
	SignupRequestSourceAndroid string = "android"

	// SignupRequestSourceIos captures enum value "ios"
	SignupRequestSourceIos string = "ios"
)

// prop value enum
func (m *SignupRequest) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, signupRequestTypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SignupRequest) validateSource(formats strfmt.Registry) error {

	if err := validate.RequiredString("source", "body", m.Source); err != nil {
		return err
	}

	// value enum
	if err := m.validateSourceEnum("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *SignupRequest) validateTenantID(formats strfmt.Registry) error {

	if err := validate.RequiredString("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this signup request based on context it is used
func (m *SignupRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SignupRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SignupRequest) UnmarshalBinary(b []byte) error {
	var res SignupRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
