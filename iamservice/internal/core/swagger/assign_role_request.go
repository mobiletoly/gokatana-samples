// Code generated by go-swagger; DO NOT EDIT.

package swagger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssignRoleRequest assign role request
//
// swagger:model AssignRoleRequest
type AssignRoleRequest struct {

	// Name of the role to assign
	// Required: true
	// Enum: ["user","admin","moderator"]
	RoleName string `json:"roleName"`
}

// Validate validates this assign role request
func (m *AssignRoleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoleName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var assignRoleRequestTypeRoleNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","admin","moderator"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assignRoleRequestTypeRoleNamePropEnum = append(assignRoleRequestTypeRoleNamePropEnum, v)
	}
}

const (

	// AssignRoleRequestRoleNameUser captures enum value "user"
	AssignRoleRequestRoleNameUser string = "user"

	// AssignRoleRequestRoleNameAdmin captures enum value "admin"
	AssignRoleRequestRoleNameAdmin string = "admin"

	// AssignRoleRequestRoleNameModerator captures enum value "moderator"
	AssignRoleRequestRoleNameModerator string = "moderator"
)

// prop value enum
func (m *AssignRoleRequest) validateRoleNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assignRoleRequestTypeRoleNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssignRoleRequest) validateRoleName(formats strfmt.Registry) error {

	if err := validate.RequiredString("roleName", "body", m.RoleName); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleNameEnum("roleName", "body", m.RoleName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this assign role request based on context it is used
func (m *AssignRoleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssignRoleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssignRoleRequest) UnmarshalBinary(b []byte) error {
	var res AssignRoleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
