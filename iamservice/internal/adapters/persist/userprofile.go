package persist

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5"
	"github.com/mobiletoly/gokatana-samples/iamservice/internal/adapters/persist/internal/mapper"
	"github.com/mobiletoly/gokatana-samples/iamservice/internal/adapters/persist/internal/repo"
	"github.com/mobiletoly/gokatana-samples/iamservice/internal/core/model"
	"github.com/mobiletoly/gokatana-samples/iamservice/internal/core/outport"
	"github.com/mobiletoly/gokatana-samples/iamservice/internal/core/swagger"
	"github.com/mobiletoly/gokatana/katapp"
	"github.com/mobiletoly/gokatana/katpg"
)

// UserProfileAdapter implements the outport.UserProfilePersist outport interface
type UserProfileAdapter struct {
	db *katpg.DBLink
}

func NewUserProfileAdapter(db *katpg.DBLink) outport.UserProfilePersist {
	return &UserProfileAdapter{db: db}
}

func (a *UserProfileAdapter) GetUserProfileByUserID(ctx context.Context, tx pgx.Tx, userID string) (*model.UserProfile, error) {
	katapp.Logger(ctx).Debug("getting user profile by user ID", "userID", userID)

	profileEntity, err := repo.SelectUserProfileByUserID(ctx, tx, userID)
	if err != nil {
		msg := "failed to get user profile by user ID"
		katapp.Logger(ctx).Error(msg, "userID", userID, "error", err)
		return nil, katpg.PgToAppError(err, msg)
	}
	if profileEntity == nil {
		return nil, nil
	}
	return mapper.UserProfileEntityToUserProfileModel(profileEntity), nil
}

func (a *UserProfileAdapter) CreateUserProfile(ctx context.Context, tx pgx.Tx, userID string) (*model.UserProfile, error) {
	katapp.Logger(ctx).Info("creating user profile", "userID", userID)

	now := time.Now()
	profileEntity := repo.NewUserProfileEntityBuilder().
		ID(nil). // Will be auto-generated by database
		UserID(userID).
		Height(nil).
		Weight(nil).
		Gender(nil).
		BirthDate(nil).
		IsMetric(true). // Default to metric units
		CreatedAt(now).
		UpdatedAt(now).
		Build()

	createdEntity, err := repo.InsertUserProfile(ctx, tx, profileEntity)
	if err != nil {
		msg := "failed to create user profile"
		katapp.Logger(ctx).Error(msg, "userID", userID, "error", err)
		appErr := katpg.PgToAppError(err, msg)
		if appErr.Scope == katapp.ErrDuplicate {
			return nil, katapp.NewErr(katapp.ErrDuplicate, "user profile already exists for this user")
		}
		return nil, appErr
	}
	return mapper.UserProfileEntityToUserProfileModel(createdEntity), nil
}

func (a *UserProfileAdapter) UpdateUserProfile(ctx context.Context, tx pgx.Tx, userID string, req *swagger.UserProfileUpdateRequest) (*model.UserProfile, error) {
	katapp.Logger(ctx).Info("updating user profile", "userID", userID)

	// Get the existing profile first
	existingEntity, err := repo.SelectUserProfileByUserID(ctx, tx, userID)
	if err != nil {
		msg := "failed to get existing user profile"
		katapp.Logger(ctx).Error(msg, "userID", userID, "error", err)
		return nil, katpg.PgToAppError(err, msg)
	}
	if existingEntity == nil {
		return nil, katapp.NewErr(katapp.ErrNotFound, "user profile not found")
	}

	// Convert swagger request to update fields
	var height *int
	var weight *int
	var gender *string
	var birthDate *time.Time
	isMetric := existingEntity.IsMetric // Default to existing value

	if req.Height != nil {
		h := int(*req.Height)
		height = &h
	}
	if req.Weight != nil {
		w := int(*req.Weight)
		weight = &w
	}
	if req.Gender != nil {
		gender = req.Gender
	}
	if req.BirthDate != nil {
		// Convert strfmt.Date to time.Time
		parsedTime := time.Time(*req.BirthDate)
		birthDate = &parsedTime
	}
	if req.IsMetric != nil {
		isMetric = *req.IsMetric
	}

	// Create updated entity
	now := time.Now()
	updatedEntity := repo.NewUserProfileEntityBuilder().
		ID(existingEntity.ID).
		UserID(existingEntity.UserID).
		Height(height).
		Weight(weight).
		Gender(gender).
		BirthDate(birthDate).
		IsMetric(isMetric).
		CreatedAt(existingEntity.CreatedAt).
		UpdatedAt(now).
		Build()

	// Update the profile
	resultEntity, err := repo.UpdateUserProfile(ctx, tx, updatedEntity)
	if err != nil {
		msg := "failed to update user profile"
		katapp.Logger(ctx).Error(msg, "userID", userID, "error", err)
		return nil, katpg.PgToAppError(err, msg)
	}

	return mapper.UserProfileEntityToUserProfileModel(resultEntity), nil
}
