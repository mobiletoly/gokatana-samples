openapi: 3.0.3
info:
  title: User Management API
  description: API for user management operations
  version: 1.0.0

paths:
  /api/v1/users/me:
    get:
      operationId: getCurrentUser
      summary: Get current user profile
      description: Returns the profile information for the authenticated user
      tags:
        - Users
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUserResponse'

  /api/v1/users:
    get:
      operationId: listUsersByTenant
      summary: List all users (Admin only)
      description: Returns a list of all users in the system. Requires admin role.
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of users per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUsersResponse'

  /api/v1/user/all:
    get:
      operationId: listAllUsers
      summary: List all users (Sysadmin only)
      description: Returns a list of all users in the system. Requires sysadmin role.
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of users per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUsersResponse'

  /api/v1/users/{userId}:
    get:
      operationId: getUserById
      summary: Get user by ID (Admin only)
      description: Returns detailed information about a specific user. Requires admin role.
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUserResponse'
    put:
      operationId: updateAuthUser
      summary: Update user details
      description: Update user first name and last name. Users can update their own details, admins can update any user.
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to update
          schema:
            type: string
      requestBody:
        description: User details to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuthUserRequest'
      responses:
        '200':
          description: User details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUserResponse'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized - invalid or missing token
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found
        '500':
          description: Internal server error

  /api/v1/users/{userId}/profile:
    get:
      operationId: getUserProfileById
      summary: Get user profile (Admin only)
      description: Returns the profile information for a specific user. Requires admin role.
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
    put:
      operationId: updateUserProfile
      summary: Update user profile (Admin only)
      description: Updates the profile information for a specific user. Requires admin role.
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      requestBody:
        required: true
        description: User profile update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'

  /api/v1/users/{userId}/roles:
    get:
      operationId: getUserRolesByUserId
      summary: Get user roles (Admin only)
      description: Returns the roles assigned to a specific user. Requires admin role.
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      responses:
        '200':
          description: User roles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRolesResponse'

    post:
      operationId: assignUserRole
      summary: Assign role to user (Admin only)
      description: Assigns a role to a user. Requires admin role.
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignUserRoleRequest'
      responses:
        '200':
          description: Role assigned successfully

components:
  schemas:
    UpdateUserProfileRequest:
      type: object
      description: 'User profile update request data'
      properties:
        height:
          type: integer
          nullable: true
          example: 175
          description: 'User height in centimeters'
        weight:
          type: integer
          nullable: true
          example: 70000
          description: 'User weight in grams'
        gender:
          $ref: "#/components/schemas/UserProfileGender"
        birthDate:
          type: string
          nullable: true
          format: date
          example: '1990-01-15'
          description: 'User birth date in YYYY-MM-DD format'
        isMetric:
          type: boolean
          nullable: true
          example: true
          description: 'Whether to use metric units (true) or imperial units (false)'

    UserProfileResponse:
      type: object
      description: 'User profile data'
      properties:
        userId:
          type: string
          nullable: false
          example: 'uuid-123-456-789'
          description: 'User unique identifier'
        height:
          type: integer
          nullable: true
          example: 175
          description: 'User height in centimeters'
        weight:
          type: integer
          nullable: true
          example: 70000
          description: 'User weight in grams'
        gender:
          $ref: "#/components/schemas/UserProfileGender"
        birthDate:
          type: string
          nullable: true
          format: date
          example: '1990-01-15'
          description: 'User birth date'
        isMetric:
          type: boolean
          nullable: false
          example: true
          description: 'Whether to use metric units (true) or imperial units (false)'
        createdAt:
          type: string
          nullable: false
          format: date-time
          example: '2023-12-01T10:00:00Z'
          description: 'Profile creation timestamp'
        updatedAt:
          type: string
          nullable: false
          format: date-time
          example: '2023-12-01T10:00:00Z'
          description: 'Last profile update timestamp'
      required:
        - id
        - userId
        - isMetric
        - createdAt
        - updatedAt

    AuthUserResponse:
      type: object
      description: 'Authentication user data'
      properties:
        id:
          type: string
          nullable: false
          example: 'uuid-123-456-789'
          description: 'User unique identifier'
        email:
          type: string
          nullable: false
          format: email
          example: 'user@example.com'
          description: 'User email address'
        firstName:
          type: string
          nullable: false
          example: 'John'
          description: 'User first name'
        lastName:
          type: string
          nullable: false
          example: 'Doe'
          description: 'User last name'
        createdAt:
          type: string
          nullable: false
          format: date-time
          example: '2023-12-01T10:00:00Z'
          description: 'Account creation timestamp'
        updatedAt:
          type: string
          nullable: false
          format: date-time
          example: '2023-12-01T10:00:00Z'
          description: 'Last profile update timestamp'
        tenantId:
          type: string
          nullable: false
          example: 'acme-corp'
          description: 'Tenant identifier for multi-tenant support'
      required:
        - id
        - email
        - firstName
        - lastName
        - createdAt
        - updatedAt
        - tenantId

    AuthUsersResponse:
      type: object
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AuthUserResponse'
        pagination:
          $ref: './common.yaml#/components/schemas/PaginationInfo'

    UserRolesResponse:
      type: object
      required:
        - userId
        - roles
      properties:
        userId:
          type: string
        roles:
          type: array
          items:
            type: string
          description: List of role names assigned to the user

    AssignUserRoleRequest:
      type: object
      required:
        - roleName
      properties:
        roleName:
          type: string
          nullable: false
          description: Name of the role to assign
          enum: [ user, admin, moderator ]

    UpdateAuthUserRequest:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
          nullable: false
          minLength: 1
          maxLength: 100
          description: User's first name
          example: John
        lastName:
          type: string
          nullable: false
          minLength: 1
          maxLength: 100
          description: User's last name
          example: Doe

    UserProfileGender:
      type: string
      enum:
        - male
        - female
        - other
