openapi: 3.0.3
info:
  version: '1.0.0'
  title: 'IAMService User Authentication'
  description: 'User authentication APIs for IAMService application'

servers:
  - url: '/api/v1/auth'
    description: Authentication API server

paths:
  /signup:
    post:
      operationId: signUp
      summary: 'Sign up a new user'
      description: 'Register a new user with email and password (local mode)'
      requestBody:
        description: 'User signup information'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '201':
          description: 'User successfully created, email confirmation required'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpResponse'
        '400':
          description: 'Invalid input data'
        '409':
          description: 'User already exists'
        '500':
          description: 'Internal server error'

  /signin:
    post:
      operationId: signIn
      summary: 'Sign in user'
      description: 'Authenticate user with email and password (local mode)'
      requestBody:
        description: 'User signin credentials'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
      responses:
        '200':
          description: 'User successfully authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInResponse'
        '400':
          description: 'Invalid input data'
        '401':
          description: 'Invalid credentials'
        '500':
          description: 'Internal server error'

  /signout:
    post:
      operationId: signOut
      summary: 'Sign out user'
      description: 'Sign out the current user and invalidate session/token'
      responses:
        '200':
          description: 'User successfully signed out'
        '401':
          description: 'Unauthorized - invalid or missing token'

  /refresh:
    post:
      operationId: refreshToken
      summary: 'Refresh authentication token'
      description: 'Refresh the authentication token using refresh token'
      requestBody:
        description: 'Refresh token request'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
      responses:
        '200':
          description: 'Token refreshed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInResponse'
        '400':
          description: 'Invalid refresh token'
        '401':
          description: 'Refresh token expired or invalid'

  /confirm-email:
    post:
      operationId: confirmEmail
      summary: 'Confirm user email address'
      description: 'Confirm user email address using the confirmation code sent via email'
      requestBody:
        description: 'Email confirmation data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailConfirmationRequest'
      responses:
        '200':
          description: 'Email confirmed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailConfirmationResponse'
        '400':
          description: 'Invalid or expired code'
        '404':
          description: 'Code not found'
        '500':
          description: 'Internal server error'

components:
  schemas:
    SignUpRequest:
      type: object
      description: 'Request payload for creating new auth_user record'
      properties:
        email:
          type: string
          nullable: false
          example: 'user@example.com'
          description: 'User email address (must be unique within tenant)'
        password:
          type: string
          nullable: false
          minLength: 8
          example: 'SecurePassword123!'
          description: 'User password (minimum 8 characters, will be hashed)'
        firstName:
          type: string
          nullable: false
          example: 'John'
          description: 'User first name'
        lastName:
          type: string
          nullable: false
          example: 'Doe'
          description: 'User last name'
        tenantId:
          type: string
          nullable: false
          example: 'acme-corp'
          description: 'Tenant identifier for multi-tenant support'
        source:
          type: string
          nullable: false
          enum: ['web', 'android', 'ios']
          example: 'web'
          description: 'Platform source for customized email confirmation experience'
      required:
        - email
        - password
        - firstName
        - lastName
        - tenantId
        - source

    SignInRequest:
      type: object
      properties:
        email:
          type: string
          nullable: false
          example: 'user@example.com'
          description: 'User email address'
        password:
          type: string
          nullable: false
          example: 'SecurePassword123!'
          description: 'User password'
        tenantId:
          type: string
          nullable: false
          example: 'acme-corp'
          description: 'Tenant identifier for multi-tenant support'
      required:
        - email
        - password
        - tenantId

    TokenRefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
          nullable: false
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
          description: 'Refresh token'
      required:
        - refreshToken

    SignUpResponse:
      type: object
      description: 'Response after successful user signup indicating email confirmation is required'
      properties:
        message:
          type: string
          nullable: false
          description: 'Success message'
          example: 'User account created successfully. Please check your email to confirm your account.'
        email:
          type: string
          nullable: false
          description: 'Email address where confirmation was sent'
        userId:
          type: string
          nullable: false
          description: 'ID of the created user'
      required:
        - message
        - email
        - userId

    EmailConfirmationResponse:
      type: object
      description: 'Response after successful email confirmation'
      properties:
        message:
          type: string
          nullable: false
          description: 'Success message'
          example: 'Email confirmed successfully'
      required:
        - message

    SignInResponse:
      type: object
      properties:
        accessToken:
          type: string
          nullable: false
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
          description: 'JWT access token'
        refreshToken:
          type: string
          nullable: false
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
          description: 'JWT refresh token'
        tokenType:
          type: string
          nullable: false
          example: 'Bearer'
          description: 'Token type'
        expiresIn:
          type: integer
          format: int64
          nullable: false
          example: 3600
          description: 'Token expiration time in seconds'
        userId:
          type: string
          nullable: false
          example: 'uuid-123-456-789'
          description: 'User unique identifier'
      required:
        - accessToken
        - refreshToken
        - tokenType
        - expiresIn
        - userId

    EmailConfirmationRequest:
      type: object
      description: 'Request payload for email confirmation'
      properties:
        userId:
          type: string
          nullable: false
          example: 'uuid-123-456-789'
          description: 'User ID to confirm email for'
        code:
          type: string
          nullable: false
          example: '123456'
          description: 'Email confirmation code (6-digit for mobile, long token for web)'
      required:
        - userId
        - code
