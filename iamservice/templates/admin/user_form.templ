package admin

import "github.com/mobiletoly/gokatana-samples/iamservice/templates/common"

import "github.com/mobiletoly/gokatana-samples/iamservice/internal/core/swagger"

templ UserForm() {
	<div class="space-y-6">
		@common.PageHeader("Add New User", common.BackButton("/web/admin/users", "Back to List"))
		<div id="form-messages"></div>
		@Card("p-6", UserFormContent())
	</div>
}

templ UserFormContent() {
	<form
		hx-post="/web/admin/users"
		hx-target="#form-messages"
		hx-swap="innerHTML"
		class="space-y-6"
	>
		@common.FormField("text", "tenantId", "tenantId", "Tenant ID", "Enter tenant ID", true, templ.Attributes{"value": "default-tenant"})
		@common.FormField("email", "email", "email", "Email Address", "Enter email address", true, templ.Attributes{})
		@common.FormField("password", "password", "password", "Password", "Enter password (min 8 characters)", true, templ.Attributes{"minlength": "8"})
		@common.FormField("text", "firstName", "firstName", "First Name", "Enter first name", true, templ.Attributes{})
		@common.FormField("text", "lastName", "lastName", "Last Name", "Enter last name", true, templ.Attributes{})
		<div class="flex justify-end">
			@common.LoadingSubmitButton("Create User", "Creating...", "primary", "md", "plus", false)
		</div>
	</form>
}

templ UserFormSuccess(userName string) {
	@common.Alert("success", "Success!", "User \""+userName+"\" has been created successfully.",
		common.LinkButton("success", "sm", "/web/admin/users", "View All Users", ""))
}

templ UserEditForm(user *swagger.AuthUserResponse) {
	<div class="space-y-6">
		@common.PageHeader("Edit User Details", common.BackButton("/web/admin/users/"+user.ID, "Back to User"))
		<div id="form-messages"></div>
		@Card("p-6", UserEditFormContent(user))
	</div>
}

templ UserEditFormContent(user *swagger.AuthUserResponse) {
	<form
		hx-put={ "/web/admin/users/" + user.ID }
		hx-target="#form-messages"
		hx-swap="innerHTML"
		class="space-y-6"
	>
		<div>
			<label for="firstName" class="block text-sm font-medium text-gray-700 mb-1">
				First Name <span class="text-red-500">*</span>
			</label>
			<input
				type="text"
				id="firstName"
				name="firstName"
				value={ user.FirstName }
				required
				class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
				placeholder="Enter first name"
			/>
		</div>
		<div>
			<label for="lastName" class="block text-sm font-medium text-gray-700 mb-1">
				Last Name <span class="text-red-500">*</span>
			</label>
			<input
				type="text"
				id="lastName"
				name="lastName"
				value={ user.LastName }
				required
				class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
				placeholder="Enter last name"
			/>
		</div>
		<div class="flex justify-end space-x-3">
			@common.LoadingSubmitButton("Update Details", "Updating...", "primary", "md", "save", false)
			<a
				href={ templ.URL("/web/admin/users/" + user.ID) }
				class="inline-flex items-center px-6 py-3 border border-gray-300 text-base font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
				hx-get={ "/web/admin/users/" + user.ID }
				hx-target="#content"
				hx-push-url="true"
			>
				Cancel
			</a>
		</div>
	</form>
}

templ UserChangePasswordForm(user *swagger.AuthUserResponse) {
	<div class="space-y-6">
		@common.PageHeader("Change Password", common.BackButton("/web/admin/users/"+user.ID, "Back to User"))
		<div id="form-messages"></div>
		@Card("p-6", UserChangePasswordFormContent(user))
	</div>
}

templ UserChangePasswordFormContent(user *swagger.AuthUserResponse) {
	<form
		hx-post={ "/web/admin/users/" + user.ID + "/change-password" }
		hx-target="#form-messages"
		hx-swap="innerHTML"
		class="space-y-6"
	>
		<div class="bg-blue-50 border border-blue-200 rounded-md p-4">
			<div class="flex">
				<div class="flex-shrink-0">
					<svg class="h-5 w-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
					</svg>
				</div>
				<div class="ml-3">
					<h3 class="text-sm font-medium text-blue-800">
						Changing password for: { user.FirstName } { user.LastName }
					</h3>
					<div class="mt-2 text-sm text-blue-700">
						<p>Email: { string(user.Email) }</p>
					</div>
				</div>
			</div>
		</div>
		<div>
			<label for="newPassword" class="block text-sm font-medium text-gray-700 mb-1">
				New Password <span class="text-red-500">*</span>
			</label>
			<input
				type="password"
				id="newPassword"
				name="newPassword"
				required
				minlength="8"
				class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
				placeholder="Enter new password (minimum 8 characters)"
			/>
			<p class="mt-1 text-sm text-gray-500">
				Password must be at least 8 characters long.
			</p>
		</div>
		<div>
			<label for="confirmPassword" class="block text-sm font-medium text-gray-700 mb-1">
				Confirm New Password <span class="text-red-500">*</span>
			</label>
			<input
				type="password"
				id="confirmPassword"
				name="confirmPassword"
				required
				minlength="8"
				class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
				placeholder="Confirm new password"
			/>
		</div>
		<div class="flex justify-end space-x-3">
			@common.LoadingSubmitButton("Change Password", "Changing...", "primary", "md", "key", false)
			<a
				href={ templ.URL("/web/admin/users/" + user.ID) }
				class="inline-flex items-center px-6 py-3 border border-gray-300 text-base font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
				hx-get={ "/web/admin/users/" + user.ID }
				hx-target="#content"
				hx-push-url="true"
			>
				Cancel
			</a>
		</div>
	</form>
}

templ UserEditSuccess(userName string) {
	@common.Alert("success", "Success!", "User details for \""+userName+"\" have been updated successfully.",
		common.LinkButton("success", "sm", "/web/admin/users", "View All Users", ""))
}

templ UserPasswordChangeSuccess(userName string) {
	@common.Alert("success", "Success!", "Password for \""+userName+"\" has been changed successfully.",
		common.LinkButton("success", "sm", "/web/admin/users", "View All Users", ""))
}

templ UserRoles(userID string, roles []string) {
	<div class="space-y-6">
		<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
			<h2 class="text-2xl font-bold text-gray-900">User Roles</h2>
			<a
				href="/web/admin/users"
				class="mt-4 sm:mt-0 inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
				hx-get="/web/admin/users"
				hx-target="#content"
				hx-push-url="true"
			>
				<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
				</svg>
				Back to Users
			</a>
		</div>
		<div class="bg-white border border-gray-200 rounded-lg p-6">
			<h3 class="text-lg font-medium text-gray-900 mb-4">Current Roles</h3>
			if len(roles) == 0 {
				<p class="text-sm text-gray-500 mb-6">No roles assigned to this user.</p>
			} else {
				<div class="flex flex-wrap gap-2 mb-6">
					for _, role := range roles {
						<span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
							{ role }
							<button
								class="ml-2 inline-flex items-center p-0.5 rounded-full text-blue-400 hover:text-blue-600 focus:outline-none focus:text-blue-600"
								hx-delete={ "/web/admin/users/" + userID + "/roles/" + role }
								hx-target="#content"
								hx-confirm={ "Are you sure you want to remove the '" + role + "' role?" }
							>
								<svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
								</svg>
							</button>
						</span>
					}
				</div>
			}
			<div class="border-t border-gray-200 pt-6">
				<h4 class="text-md font-medium text-gray-900 mb-4">Assign New Role</h4>
				<form
					hx-post={ "/web/admin/users/" + userID + "/roles" }
					hx-target="#content"
					class="flex items-end space-x-3"
				>
					<div class="flex-1">
						<label for="roleName" class="block text-sm font-medium text-gray-700 mb-1">
							Role Name
						</label>
						<select
							id="roleName"
							name="roleName"
							required
							class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
						>
							<option value="">Select a role...</option>
							<option value="user">User</option>
							<option value="admin">Admin</option>
						</select>
					</div>
					@common.LoadingSubmitButton("Assign Role", "Assigning...", "primary", "sm", "plus", false)
				</form>
			</div>
		</div>
	</div>
}
