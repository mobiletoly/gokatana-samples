package templates

// ============================================================================
// NAVIGATION COMPONENTS
// ============================================================================

// NavLink renders a navigation link with consistent HTMX behavior and styling
templ NavLink(href string, text string) {
	<a href={ templ.URL(href) } 
	   hx-get={ href } 
	   hx-target="#content" 
	   hx-push-url="true"
	   class="text-gray-600 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200">
		{ text }
	</a>
}

// BackButton renders a consistent back button with arrow icon
templ BackButton(href string, text string) {
	<a href={ templ.URL(href) }
	   class="mt-4 sm:mt-0 inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
	   hx-get={ href } hx-target="#content" hx-push-url="true">
		@Icon("arrow-left", "w-4 h-4 mr-2")
		{ text }
	</a>
}

// ============================================================================
// BUTTON COMPONENTS
// ============================================================================

// Button renders a button with consistent styling and optional icon
templ Button(variant string, size string, text string, iconName string, attrs templ.Attributes) {
	<button
		class={
			"inline-flex items-center border border-transparent font-medium rounded-md transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2",
			getButtonVariantClasses(variant),
			getButtonSizeClasses(size)
		}
		{ attrs... }>
		if iconName != "" {
			@Icon(iconName, getButtonIconSize(size))
		}
		{ text }
	</button>
}

// LinkButton renders a link styled as a button
templ LinkButton(variant string, size string, href string, text string, iconName string) {
	<a href={ templ.URL(href) }
	   class={ 
		   "inline-flex items-center border border-transparent font-medium rounded-md transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2",
		   getButtonVariantClasses(variant),
		   getButtonSizeClasses(size)
	   }
	   hx-get={ href } hx-target="#content" hx-push-url="true">
		if iconName != "" {
			@Icon(iconName, getButtonIconSize(size))
		}
		{ text }
	</a>
}

// ============================================================================
// FORM COMPONENTS
// ============================================================================

// FormField renders a form input with label and consistent styling
templ FormField(fieldType string, id string, name string, label string, placeholder string, required bool, attrs templ.Attributes) {
	<div>
		<label for={ id } class="block text-sm font-medium text-gray-700 mb-1">
			{ label }
		</label>
		<input 
			type={ fieldType }
			id={ id }
			name={ name }
			placeholder={ placeholder }
			if required {
				required
			}
			class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
			{ attrs... }/>
	</div>
}

// SelectField renders a select dropdown with label and consistent styling
templ SelectField(id string, name string, label string, required bool, options []SelectOption, attrs templ.Attributes) {
	<div>
		<label for={ id } class="block text-sm font-medium text-gray-700 mb-1">
			{ label }
		</label>
		<select 
			id={ id }
			name={ name }
			if required {
				required
			}
			class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
			{ attrs... }>
			for _, option := range options {
				<option value={ option.Value }>{ option.Label }</option>
			}
		</select>
	</div>
}

// ============================================================================
// CARD COMPONENTS
// ============================================================================

// Card renders a basic card container
templ Card(classes string, content templ.Component) {
	<div class={ "bg-white border border-gray-200 rounded-lg shadow-sm", classes }>
		@content
	</div>
}

// FeatureCard renders a feature card with icon, title, description and action
templ FeatureCard(iconName string, iconColor string, title string, description string, actionHref string, actionText string, actionVariant string) {
	@Card("p-6 hover:shadow-md transition-shadow duration-200", FeatureCardContent(iconName, iconColor, title, description, actionHref, actionText, actionVariant))
}

templ FeatureCardContent(iconName string, iconColor string, title string, description string, actionHref string, actionText string, actionVariant string) {
	<div class="flex items-center">
		<div class="flex-shrink-0">
			@Icon(iconName, "w-8 h-8 " + iconColor)
		</div>
		<div class="ml-4">
			<h3 class="text-lg font-medium text-gray-900">{ title }</h3>
			<p class="text-sm text-gray-500">{ description }</p>
		</div>
	</div>
	<div class="mt-4">
		@LinkButton(actionVariant, "sm", actionHref, actionText, "arrow-right")
	</div>
}

// ============================================================================
// ALERT COMPONENTS
// ============================================================================

// Alert renders success, error, warning, or info alerts
templ Alert(variant string, title string, message string, actions templ.Component) {
	<div class={ 
		"rounded-md p-4 border",
		getAlertClasses(variant)
	}>
		<div class="flex">
			<div class="flex-shrink-0">
				@Icon(getAlertIcon(variant), "h-5 w-5 " + getAlertIconColor(variant))
			</div>
			<div class="ml-3">
				<h3 class={ "text-sm font-medium", getAlertTitleColor(variant) }>
					{ title }
				</h3>
				<div class={ "mt-2 text-sm", getAlertTextColor(variant) }>
					<p>{ message }</p>
				</div>
				if actions != nil {
					<div class="mt-4">
						@actions
					</div>
				}
			</div>
		</div>
	</div>
}

// ============================================================================
// ICON COMPONENT
// ============================================================================

// Icon renders SVG icons with consistent sizing
templ Icon(name string, classes string) {
	<svg class={ classes } fill="none" stroke="currentColor" viewBox="0 0 24 24">
		<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={ getIconPath(name) }></path>
	</svg>
}

// ============================================================================
// LAYOUT COMPONENTS
// ============================================================================

// PageHeader renders a consistent page header with title and optional action
templ PageHeader(title string, action templ.Component) {
	<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
		<h2 class="text-2xl font-bold text-gray-900">{ title }</h2>
		if action != nil {
			@action
		}
	</div>
}

// LoadingSpinner renders a loading spinner for HTMX indicators
templ LoadingSpinner(text string) {
	<span class="htmx-indicator">
		<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
			<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
			<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
		</svg>
		{ text }
	</span>
}

// ============================================================================
// HELPER TYPES
// ============================================================================

type SelectOption struct {
	Value string
	Label string
}

// ============================================================================
// HELPER FUNCTIONS
// ============================================================================

func getButtonVariantClasses(variant string) string {
	switch variant {
	case "primary":
		return "text-white bg-blue-600 hover:bg-blue-700 focus:ring-blue-500"
	case "secondary":
		return "text-gray-700 bg-white border-gray-300 hover:bg-gray-50 focus:ring-blue-500"
	case "danger":
		return "text-red-700 bg-white border-red-300 hover:bg-red-50 focus:ring-red-500"
	case "success":
		return "text-green-700 bg-green-100 hover:bg-green-200 focus:ring-green-500"
	default:
		return "text-gray-700 bg-white border-gray-300 hover:bg-gray-50 focus:ring-blue-500"
	}
}

func getButtonSizeClasses(size string) string {
	switch size {
	case "sm":
		return "px-3 py-2 text-sm leading-4"
	case "lg":
		return "px-6 py-3 text-base"
	default:
		return "px-4 py-2 text-sm"
	}
}

func getButtonIconSize(size string) string {
	switch size {
	case "sm":
		return "w-4 h-4 mr-1"
	case "lg":
		return "w-5 h-5 mr-2"
	default:
		return "w-4 h-4 mr-2"
	}
}

func getAlertClasses(variant string) string {
	switch variant {
	case "success":
		return "bg-green-50 border-green-200"
	case "error":
		return "bg-red-50 border-red-200"
	case "warning":
		return "bg-yellow-50 border-yellow-200"
	case "info":
		return "bg-blue-50 border-blue-200"
	default:
		return "bg-gray-50 border-gray-200"
	}
}

func getAlertIcon(variant string) string {
	switch variant {
	case "success":
		return "check-circle"
	case "error":
		return "x-circle"
	case "warning":
		return "exclamation-triangle"
	case "info":
		return "information-circle"
	default:
		return "information-circle"
	}
}

func getAlertIconColor(variant string) string {
	switch variant {
	case "success":
		return "text-green-400"
	case "error":
		return "text-red-400"
	case "warning":
		return "text-yellow-400"
	case "info":
		return "text-blue-400"
	default:
		return "text-gray-400"
	}
}

func getAlertTitleColor(variant string) string {
	switch variant {
	case "success":
		return "text-green-800"
	case "error":
		return "text-red-800"
	case "warning":
		return "text-yellow-800"
	case "info":
		return "text-blue-800"
	default:
		return "text-gray-800"
	}
}

func getAlertTextColor(variant string) string {
	switch variant {
	case "success":
		return "text-green-700"
	case "error":
		return "text-red-700"
	case "warning":
		return "text-yellow-700"
	case "info":
		return "text-blue-700"
	default:
		return "text-gray-700"
	}
}

func getIconPath(name string) string {
	switch name {
	case "arrow-left":
		return "M10 19l-7-7m0 0l7-7m-7 7h18"
	case "arrow-right":
		return "M9 5l7 7-7 7"
	case "plus":
		return "M12 6v6m0 0v6m0-6h6m-6 0H6"
	case "user":
		return "M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
	case "users":
		return "M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
	case "user-add":
		return "M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"
	case "eye":
		return "M15 12a3 3 0 11-6 0 3 3 0 016 0z M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
	case "shield-check":
		return "M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
	case "trash":
		return "M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
	case "check-circle":
		return "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
	case "x-circle":
		return "M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
	case "exclamation-triangle":
		return "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z"
	case "information-circle":
		return "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
	case "x":
		return "M6 18L18 6M6 6l12 12"
	default:
		return "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
	}
}
